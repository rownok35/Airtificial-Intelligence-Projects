import org.chocosolver.solver.Model;
import org.chocosolver.solver.Solver;
import org.chocosolver.solver.variables.IntVar;

public class Sudoku {
    public static void main(String[] args) {

        int i, j, k;
        
        // 1. Create a Model
        Model model = new Model("my first sudguru problem");
    
        
	IntVar[][] bd = model.intVarMatrix("bd", 6, 6, 1, 5);
        
        
        IntVar[] b0 = model.intVarArray("b0", 5, 1, 5);
        IntVar[] b1 = model.intVarArray("b1", 5, 1, 5);
        IntVar[] b2 = model.intVarArray("b2", 5, 1, 5);
        IntVar[] b3 = model.intVarArray("b3", 4, 1, 4);
        IntVar[] b4 = model.intVarArray("b4", 5, 1, 5);
        IntVar[] b5 = model.intVarArray("b5", 4, 1, 4);
        IntVar[] b6 = model.intVarArray("b6", 3, 1, 3);
        IntVar[] b7 = model.intVarArray("b7", 5, 1, 5);
       
        
        
        // 3. Post constraints
        
        
        /* post constraints for the given hints or clues */
        
        model.arithm (bd[0][0], "=", 5).post();
        model.arithm (bd[2][1], "=", 3).post(); 
        model.arithm (bd[5][4], "=", 2).post(); 
        
       
        
        

        
        for ( i = 0; i < 4; i++)
            
             model.arithm (bd[0][i], "=", b0[i]).post();
        model.arithm (bd[1][0], "=", b0[4]).post();
                
        for ( i = 4; i < 6; i++)
            model.arithm (bd[0][i], "=", b1[i-4]).post();
            
        for ( i = 2; i < 5; i++)
            model.arithm (bd[1][i], "=", b1[i]).post();
        
        model.arithm (bd[1][1], "=", b2[0]).post();
        
        for ( i = 0; i < 3; i++)
            model.arithm (bd[2][i], "=", b2[i+1]).post();
        
        model.arithm (bd[3][1], "=", b2[4]).post();
        
        model.arithm (bd[1][5], "=", b3[0]).post();
        
        for ( i = 3; i < 6; i++)
            model.arithm (bd[2][i], "=", b3[i-2]).post();
        
        model.arithm (bd[3][0], "=", b4[0]).post();
        
        for ( i = 0; i < 3; i++)
            model.arithm (bd[4][i], "=", b4[i+1]).post();
            
        model.arithm (bd[5][0], "=", b4[4]).post();
        
        for ( i = 2; i < 4; i++)
            model.arithm (bd[3][i], "=", b5[i-2]).post();
            
        for ( i = 3; i < 5; i++)
            model.arithm (bd[4][i], "=", b5[i-1]).post();
        
        for ( i = 4; i < 6; i++)
            model.arithm (bd[3][i], "=", b6[i-4]).post();
            
        model.arithm (bd[4][5], "=", b6[2]).post();
        
        for ( i = 1; i < 6; i++)
            model.arithm (bd[5][i], "=", b7[i-1]).post();
            
       
            

 
        
       
        
        model.allDifferent(b0).post();
        model.allDifferent(b1).post();
        model.allDifferent(b2).post();
        model.allDifferent(b3).post();
        model.allDifferent(b4).post();
        model.allDifferent(b5).post();
        model.allDifferent(b6).post();
        model.allDifferent(b7).post();
        
        for(i=0;i<6;i++)
        {
            for(j=0;j<6;j++)
            {
                if((i-1)>=0 & (j-1)>=0 & (i+1)<=5 & (j+1)<=5)
                {
                    model.arithm (bd[i][j], "!=", bd[i-1][j+1]).post();
                    model.arithm (bd[i][j], "!=", bd[i][j+1]).post();
                    model.arithm (bd[i][j], "!=", bd[i+1][j+1]).post();
                    
                    model.arithm (bd[i][j], "!=", bd[i-1][j]).post();
                    model.arithm (bd[i][j], "!=", bd[i+1][j]).post();
                    
                    model.arithm (bd[i][j], "!=", bd[i-1][j-1]).post();
                    model.arithm (bd[i][j], "!=", bd[i][j-1]).post();
                    model.arithm (bd[i][j], "!=", bd[i+1][j-1]).post();
                }
                
                if(i==0 & j==0)
                {
                    model.arithm (bd[i][j], "!=", bd[i][j+1]).post();
                    model.arithm (bd[i][j], "!=", bd[i+1][j+1]).post();
                    model.arithm (bd[i][j], "!=", bd[i+1][j]).post();
                }
                
                if(i>=1 & j==0 & i<5)
                {
                    model.arithm (bd[i][j], "!=", bd[i-1][j]).post();
                    model.arithm (bd[i][j], "!=", bd[i-1][j+1]).post();
                    model.arithm (bd[i][j], "!=", bd[i][j+1]).post();
                    model.arithm (bd[i][j], "!=", bd[i+1][j]).post();
                    model.arithm (bd[i][j], "!=", bd[i+1][j+1]).post();
                }
                
                if(i==5 & j==0)
                {
                    model.arithm (bd[i][j], "!=", bd[i-1][j]).post();
                    model.arithm (bd[i][j], "!=", bd[i-1][j+1]).post();
                    model.arithm (bd[i][j], "!=", bd[i][j+1]).post();
                }
                
                if(i==0 & j>=1 & j<5)
                {
                    model.arithm (bd[i][j], "!=", bd[i][j-1]).post();
                    model.arithm (bd[i][j], "!=", bd[i+1][j-1]).post();
                    model.arithm (bd[i][j], "!=", bd[i+1][j]).post();
                    model.arithm (bd[i][j], "!=", bd[i+1][j+1]).post();
                    model.arithm (bd[i][j], "!=", bd[i][j+1]).post();
                }
                
                if(i==0 & j==5)
                {
                    model.arithm (bd[i][j], "!=", bd[i][j-1]).post();
                    model.arithm (bd[i][j], "!=", bd[i+1][j-1]).post();
                    model.arithm (bd[i][j], "!=", bd[i+1][j]).post();
                }
                
                if(i==5 & j>=1 & j<5)
                {
                    model.arithm (bd[i][j], "!=", bd[i][j-1]).post();
                    model.arithm (bd[i][j], "!=", bd[i-1][j-1]).post();
                    model.arithm (bd[i][j], "!=", bd[i-1][j]).post();
                    model.arithm (bd[i][j], "!=", bd[i-1][j+1]).post();
                    model.arithm (bd[i][j], "!=", bd[i][j+1]).post();
                }
                
                if(i==5 & j==5)
                {
                    model.arithm (bd[i][j], "!=", bd[i][j-1]).post();
                    model.arithm (bd[i][j], "!=", bd[i-1][j-1]).post();
                    model.arithm (bd[i][j], "!=", bd[i-1][j]).post();
                }
                if(i>=1 & i <5 & j==5)
                {
                    model.arithm (bd[i][j], "!=", bd[i-1][j]).post();
                    model.arithm (bd[i][j], "!=", bd[i-1][j-1]).post();
                    model.arithm (bd[i][j], "!=", bd[i][j-1]).post();
                    model.arithm (bd[i][j], "!=", bd[i+1][j-1]).post();
                    model.arithm (bd[i][j], "!=", bd[i+1][j]).post();
                }
            }
        }
       
        
        
        


        // 4. Solve the problem
        Solver solver = model.getSolver();
        solver.showStatistics();
        solver.showSolutions();
        solver.findSolution();
        
        // 5. Print the solution
        for ( i = 0; i < 6; i++){
            for ( j = 0; j < 6; j++){ 
              
                System.out.print(" "); 
                /* get the value for the board position [i][j] for the solved board */
                k = bd [i][j].getValue();
                System.out.print(k );
            }
            System.out.println();
        }
        
    }

}